<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board" /> -->
	<!-- controller 패키지 내의 클래스들이 DispatcherServlet 에서 관리될 스프링 빈으로 등록됨 -->
	<context:component-scan base-package="com.itwillbs.mvc_board.controller" />
	<!-- 주의! controller 패키지만 명시했으므로 나머지 패키지의 클래스들은 스프링빈으로 등록되지 못함 -->
	<!-- 웹과 관련없는 Service 등의 패키지는 root-context.xml 에서 관리하도록 추가로 등록 -->
	
<!-- 	<tx:annotation-driven/> -->
	<!-- ========================================================================= -->
	<!-- 
	파일 업로드 처리를 위해 form 태그에 enctype="multipart/form-data" 속성을 추가했을 경우
	스프링 컨트롤러에서 폼 파라미터 데이터 처리를 위해(또는 MultipartFile 타입 객체 처리 위해)
	org.springframework.web.multipart.commons.CommonsMultipartResolver 객체 설정 필수!
	(꼭 MultipartFile 타입 객체를 사용하지 않더라도 request 객체를 통한 파라미터 처리가 가능해짐)
	=> bean 태그(현재 servlet-context.xml 파일에서는 <beans:bean> 태그) 사용하여 객체 설정
	=> id 속성값은 "muiltipartResolver" 고정
	=> class 속성값은 해당 라이브러리의 클래스 지정
	=> <beans:bean> 태그 사이에 <beans:property> 태그를 통해 파일 업로드 옵션(사이즈, 인코딩) 설정
	   이 때, name 속성값은 고정된 값 사용
	-->

	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--  maxUploadSize 속성 : 파일 업로드 시 최대 파일 사이즈 지정(Byte 단위) => 10MB 로 제한 설정  -->
		<beans:property name="maxUploadSize" value="10485760"/>
		<!--  defaultEncoding 속성 : 파일명에 한글 등의 아스키코드 외의 문자 인코딩 방식 설정(UTF-8)  -->
		<beans:property name="defaultEncoding" value="UTF-8"/>
	</beans:bean>

</beans:beans>
